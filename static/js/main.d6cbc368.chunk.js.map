{"version":3,"sources":["logo.svg","api/config.js","components/AutoSuggest.js","components/HttpConsts.js","components/ConfigEditor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getConfig","a","axios","get","saveConfig","config","post","getSuggestionValue","suggestion","renderSuggestion","AutoSuggestionInput","props","getSuggestions","value","optionalValues","inputValue","trim","toLowerCase","length","filter","o","includes","onSuggestionsFetchRequested","setState","suggestions","onSuggestionsClearRequested","renderInputComponent","inputProps","Input","state","this","id","onSuggestionSelected","e","suggestionValue","React","Component","optionalHttpFields","optionalHttpHeaders","ConfigEditor","parent","addField","loaded","api","data","request","includeAllHeaders","isAllFields","headers","response","c","omit","alert","event","newState","Object","assign","target","type","checked","name","console","log","fields","currentFields","indexOf","push","set","key","splice","getter","placeholder","renderedList","map","index","onClick","removeField","size","color","style","marginRight","onChange","handleInputChange","className","AutoSuggest","Container","Form","FormGroup","Label","for","logPath","Row","Col","marginLeft","renderFields","Button","onSubmit","defaultProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d6cbc368.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\n\nexport async function getConfig() {\n  return await axios.get('http://localhost:8080/config');\n}\n\nexport async function saveConfig(config) {\n  return await axios.post('http://localhost:8080/config', config);\n}\n","import React, { useState } from 'react';\nimport {\n  Button,\n  Form,\n  Checkbox,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  CustomInput,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n} from 'reactstrap';\n\nimport Autosuggest from 'react-autosuggest';\n\n// Imagine you have a list of languages that you'd like to autosuggest.\nconst optionalFields = ['version', 'url', 'scheme', 'host', 'method'];\n\n// Teach Autosuggest how to calculate suggestions for any given input value.\n\n// When suggestion is clicked, Autosuggest needs to populate the input\n// based on the clicked suggestion. Teach Autosuggest how to calculate the\n// input value for every given suggestion.\nconst getSuggestionValue = suggestion => {\n  return suggestion;\n};\n\n// Use your imagination to render suggestions.\nconst renderSuggestion = suggestion => <div>{suggestion}</div>;\n\nclass AutoSuggestionInput extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { suggestions: this.props.optionalValues };\n  }\n\n  getSuggestions = value => {\n    const { optionalValues } = this.props;\n    const inputValue = value.trim().toLowerCase();\n    const inputLength = inputValue.length;\n\n    if (inputLength === 0) return [];\n    return optionalValues.filter(o => o.toLowerCase().includes(inputValue));\n  };\n\n  onSuggestionsFetchRequested = ({ value }) => {\n    this.setState({\n      suggestions: this.getSuggestions(value),\n    });\n  };\n\n  onSuggestionsClearRequested = () => {\n    this.setState({\n      suggestions: [],\n    });\n  };\n\n  renderInputComponent = inputProps => (\n    <div>\n      <Input {...inputProps} />\n    </div>\n  );\n\n  render() {\n    const { id, inputProps } = this.props;\n    const { suggestions } = this.state;\n\n    return (\n      <Autosuggest\n        id={id}\n        suggestions={suggestions}\n        renderInputComponent={this.renderInputComponent}\n        onSuggestionsFetchRequested={this.onSuggestionsFetchRequested}\n        onSuggestionsClearRequested={this.onSuggestionsClearRequested}\n        onSuggestionSelected={(e, { suggestionValue }) =>\n          this.props.onSuggestionSelected(suggestionValue)\n        }\n        getSuggestionValue={getSuggestionValue}\n        renderSuggestion={renderSuggestion}\n        inputProps={inputProps}\n      />\n    );\n  }\n}\n\nexport default AutoSuggestionInput;\n","export const optionalHttpFields = [\n  'method',\n  'url',\n  'host',\n  'version',\n  'scheme',\n];\n\nexport const optionalHttpHeaders = [\n  'Access-Control-Allow-Credentials',\n  'Access-Control-Allow-Headers',\n  'Access-Control-Allow-Methods',\n  'Access-Control-Allow-Origin',\n  'Access-Control-Expose-Headers',\n  'Access-Control-Max-Age',\n  'Accept-Ranges',\n  'Age',\n  'Allow',\n  'Alternate-Protocol',\n  'Cache-Control',\n  'Client-Date',\n  'Client-Peer',\n  'Client-Response-Num',\n  'Connection',\n  'Content-Disposition',\n  'Content-Encoding',\n  'Content-Language',\n  'Content-Length',\n  'Content-Location',\n  'Content-MD5',\n  'Content-Range',\n  'Content-Security-Policy, X-Content-Security-Policy, X-WebKit-CSP',\n  'Content-Security-Policy-Report-Only',\n  'Content-Type',\n  'Date',\n  'ETag',\n  'Expires',\n  'HTTP',\n  'Keep-Alive',\n  'Last-Modified',\n  'Link',\n  'Location',\n  'P3P',\n  'Pragma',\n  'Proxy-Authenticate',\n  'Proxy-Connection',\n  'Refresh',\n  'Retry-After',\n  'Server',\n  'Set-Cookie',\n  'Status',\n  'Strict-Transport-Security',\n  'Timing-Allow-Origin',\n  'Trailer',\n  'Transfer-Encoding',\n  'Upgrade',\n  'Vary',\n  'Via',\n  'Warning',\n  'WWW-Authenticate',\n  'X-Aspnet-Version',\n  'X-Content-Type-Options',\n  'X-Frame-Options',\n  'X-Permitted-Cross-Domain-Policies',\n  'X-Pingback',\n  'X-Powered-By',\n  'X-Robots-Tag',\n  'X-UA-Compatible',\n  'X-XSS-Protection',\n];\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Row,\n  Container,\n  Col,\n  Button,\n  Form,\n  Checkbox,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  CustomInput,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n} from 'reactstrap';\nimport { get, set, omit, remove } from 'lodash';\nimport { MdRemoveCircle as MdCancel } from 'react-icons/md';\n\nimport * as api from '../api/config';\nimport AutoSuggestionInput from './AutoSuggest';\nimport { optionalHttpHeaders, optionalHttpFields } from './HttpConsts';\n\nclass ConfigEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      loaded: false,\n    };\n  }\n\n  async componentDidMount() {\n    const { data } = await api.getConfig();\n\n    // Update state with current configuration.\n    const state = { ...data, loaded: true };\n    state.request.includeAllHeaders = this.isAllFields(state.request.headers);\n    state.response.includeAllHeaders = this.isAllFields(state.response.headers);\n    this.setState(state);\n  }\n\n  async onSubmit() {\n    let c = { ...this.state };\n\n    // Remove all non-config values from state before sending it to the server\n    c = omit(c, [\n      'loaded',\n      'add_field_to_request.headers',\n      'add_field_to_request.fields',\n      'add_field_to_response.fields',\n      'add_field_to_response.headers',\n      'request.includeAllHeaders',\n      'response.includeAllHeaders',\n    ]);\n\n    if (this.state.request.includeAllHeaders) c.request.headers = ['*'];\n    if (this.state.response.includeAllHeaders) c.response.headers = ['*'];\n\n    try {\n      await api.saveConfig(c);\n      alert('Config saved!');\n    } catch {\n      alert('Error: server might be down.');\n    }\n  }\n\n  handleInputChange(event) {\n    let newState = Object.assign({}, this.state);\n\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    console.log(name);\n    switch (name) {\n      case 'request.includeAllHeaders':\n        console.log('here!');\n        newState.request.includeAllHeaders = !newState.request\n          .includeAllHeaders;\n        break;\n      case 'response.includeAllHeaders':\n        newState.response.includeAllHeaders = !newState.response\n          .includeAllHeaders;\n        break;\n      default:\n        newState[name] = value;\n        break;\n    }\n    this.setState(newState);\n  }\n\n  addField(parent, value) {\n    let fields;\n    const currentFields = get(this.state, parent);\n\n    if (this.isAllFields(currentFields)) fields = [value];\n    else {\n      fields = [...get(this.state, parent)];\n      if (fields.indexOf(value) !== -1) return;\n      fields.push(value);\n    }\n\n    set(this.state, parent, fields);\n    this.setState(this.state);\n  }\n\n  isAllFields(fields) {\n    return fields.length === 1 && fields[0] === '*';\n  }\n\n  removeField(parent, key) {\n    let fields = [...get(this.state, parent)];\n    fields.splice(key, 1);\n    set(this.state, parent, fields);\n    this.setState(this.state);\n  }\n\n  onSuggestionSelected = (parent, suggestion) => {\n    this.addField(parent, suggestion);\n    this.setState({ ['add_field_to_' + parent]: '' });\n  };\n\n  renderFields(getter, placeholder, optionalValues) {\n    let renderedList;\n    const fields = get(this.state, getter);\n\n    if (fields.length === 1 && fields[0] === '*') renderedList = '';\n    else {\n      renderedList = fields.map((key, index) => {\n        return (\n          <li key={index}>\n            <MdCancel\n              onClick={() => this.removeField(getter, index)}\n              size={30}\n              color=\"red\"\n              style={{ marginRight: '10px' }}\n            />\n            <span>{key}</span>\n          </li>\n        );\n      });\n    }\n\n    const inputProps = {\n      name: 'add_field_to_' + getter,\n      placeholder,\n      value: this.state['add_field_to_' + getter] || '',\n      onChange: e => this.handleInputChange(e),\n    };\n\n    return (\n      <>\n        <ul className=\"proxy-fields\">{renderedList}</ul>\n        <AutoSuggestionInput\n          id={getter}\n          optionalValues={optionalValues}\n          onSuggestionSelected={suggestion =>\n            this.onSuggestionSelected(getter, suggestion)\n          }\n          inputProps={inputProps}\n        />\n      </>\n    );\n  }\n\n  render() {\n    // only render after configuration loaded.\n    if (!this.state.loaded) return '';\n\n    return (\n      <Container>\n        <Form>\n          <FormGroup>\n            <h3>General settings</h3>\n            <Label for=\"logPath\">Log path</Label>\n            <Input\n              type=\"text\"\n              name=\"logPath\"\n              id=\"logPath\"\n              placeholder=\"Log path\"\n              value={this.state.logPath}\n              onChange={e => this.handleInputChange(e)}\n            />\n          </FormGroup>\n          <Row>\n            <Col>\n              <FormGroup>\n                <h3>Request headers</h3>\n                <Label style={{ marginLeft: '25px' }}>\n                  <Input\n                    type=\"checkbox\"\n                    checked={this.state.request.includeAllHeaders}\n                    name=\"request.includeAllHeaders\"\n                    onChange={e => this.handleInputChange(e)}\n                  />{' '}\n                  Include all\n                </Label>\n                {!this.state.request.includeAllHeaders &&\n                  this.renderFields(\n                    'request.headers',\n                    'Add HTTP header',\n                    optionalHttpHeaders,\n                  )}\n              </FormGroup>\n              <FormGroup>\n                <h3>Additional request fields</h3>\n                <div>\n                  {this.renderFields(\n                    'request.fields',\n                    'Add HTTP field',\n                    optionalHttpFields,\n                  )}\n                </div>\n              </FormGroup>\n            </Col>\n            <Col>\n              <FormGroup>\n                <h3>Response headers</h3>\n                <Label style={{ marginLeft: '25px' }}>\n                  <Input\n                    type=\"checkbox\"\n                    name=\"response.includeAllHeaders\"\n                    checked={this.state.response.includeAllHeaders}\n                    onChange={e => this.handleInputChange(e)}\n                  />{' '}\n                  Include all\n                </Label>\n                {!this.state.response.includeAllHeaders &&\n                  this.renderFields(\n                    'response.headers',\n                    'Add HTTP header',\n                    optionalHttpHeaders,\n                  )}\n              </FormGroup>\n              <FormGroup>\n                <h3>Additional response fields</h3>\n                <div>\n                  {this.renderFields(\n                    'response.fields',\n                    'Add HTTP field',\n                    optionalHttpFields,\n                  )}\n                </div>\n              </FormGroup>\n            </Col>\n          </Row>\n          <Button onClick={() => this.onSubmit()}>Submit</Button>\n        </Form>\n      </Container>\n    );\n  }\n}\n\nConfigEditor.defaultProps = {};\n\nConfigEditor.propTypes = {};\n\nexport default ConfigEditor;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ConfigEditor from './components/ConfigEditor.js';\nimport { Container, Row, Col } from 'reactstrap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"top\">\n        <Container>\n          <h3>Proxy configuration</h3>\n        </Container>\n      </div>\n      <Container>\n        <ConfigEditor />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}