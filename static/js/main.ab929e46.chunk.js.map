{"version":3,"sources":["logo.svg","api/config.js","components/ConfigEditor.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","getConfig","a","axios","get","saveConfig","config","post","ConfigEditor","props","state","loaded","api","data","requestHeaders","join","responseHeaders","this","setState","c","split","alert","event","newState","Object","assign","target","value","type","checked","name","isRequest","console","log","requestInfo","responseInfo","fields","keys","map","key","index","CustomInput","id","label","onChange","e","handleFieldChange","values","help","InputGroup","InputGroupAddon","addonType","InputGroupText","Input","addon","handleInputChange","aria-label","style","marginLeft","placeholder","disabled","Form","FormGroup","Label","for","logPath","renderHeadersInput","renderFields","Button","onClick","onSubmit","React","Component","defaultProps","App","className","Container","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.ab929e46.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import axios from 'axios';\n\nexport async function getConfig() {\n  return await axios.get('http://localhost:8080/config');\n}\n\nexport async function saveConfig(config) {\n  return await axios.post('http://localhost:8080/config', config);\n}\n","import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  Button,\n  Form,\n  Checkbox,\n  FormGroup,\n  Label,\n  Input,\n  FormText,\n  CustomInput,\n  InputGroup,\n  InputGroupAddon,\n  InputGroupText,\n} from 'reactstrap';\n\nimport * as api from '../api/config';\n\nclass ConfigEditor extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.state = { loaded: false };\n  }\n\n  async componentDidMount() {\n    const { data } = await api.getConfig();\n\n    // Make arrays human readable.\n    data.requestHeaders = data.requestHeaders.join(', ');\n    data.responseHeaders = data.responseHeaders.join(', ');\n\n    // Update state with current configuration.\n    this.setState({ ...data, loaded: true });\n  }\n\n  async onSubmit() {\n    let c = { ...this.state };\n    c.requestHeaders = c.requestHeaders.split(', ');\n    c.responseHeaders = c.responseHeaders.split(', ');\n\n    try {\n      await api.saveConfig(c);\n      alert('Config saved!');\n    } catch {\n      alert('Error: server might be down.');\n    }\n  }\n\n  handleInputChange(event) {\n    let newState = Object.assign({}, this.state);\n\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    newState[name] = value;\n    this.setState(newState);\n  }\n\n  handleFieldChange(event, isRequest) {\n    let newState = Object.assign({}, this.state);\n\n    const target = event.target;\n    const value = target.type === 'checkbox' ? target.checked : target.value;\n    const name = target.name;\n\n    console.log(isRequest);\n    if (isRequest) {\n      newState.requestInfo[name] = value;\n    } else {\n      newState.responseInfo[name] = value;\n    }\n    this.setState(newState);\n  }\n\n  renderFields(isRequest) {\n    const fields = isRequest ? this.state.requestInfo : this.state.responseInfo;\n\n    return Object.keys(fields).map((key, index) => {\n      return (\n        <CustomInput\n          key={`${isRequest}_${key}`}\n          id={`${isRequest}_${key}`}\n          type=\"checkbox\"\n          label={key}\n          name={key}\n          checked={fields[key]}\n          onChange={e => this.handleFieldChange(e, isRequest)}\n        />\n      );\n    });\n  }\n\n  renderHeadersInput(isRequest) {\n    const key = isRequest\n      ? 'includeAllRequestHeaders'\n      : 'includeAllResponseHeaders';\n    const values = isRequest\n      ? this.state.requestHeaders\n      : this.state.responseHeaders;\n    const help = isRequest\n      ? ' Include all request headers'\n      : ' Include all response headers';\n\n    return (\n      <InputGroup>\n        <InputGroupAddon addonType=\"prepend\">\n          <InputGroupText>\n            <Input\n              addon\n              type=\"checkbox\"\n              checked={this.state[key]}\n              name={key}\n              onChange={e => this.handleInputChange(e)}\n              aria-label=\"Comma seperated headers\"\n            />\n            <span style={{ marginLeft: '8px' }}>{help}</span>\n          </InputGroupText>\n        </InputGroupAddon>\n        <Input\n          value={values}\n          name={isRequest ? 'requestHeaders' : 'responseHeaders'}\n          onChange={e => this.handleInputChange(e)}\n          placeholder=\"Comma separated headers\"\n          disabled={this.state[key]}\n        />\n      </InputGroup>\n    );\n  }\n\n  render() {\n    // only render after configuration loaded.\n    if (!this.state.loaded) return '';\n\n    return (\n      <div>\n        <Form>\n          <FormGroup>\n            <Label for=\"logPath\">Log path</Label>\n            <Input\n              type=\"text\"\n              name=\"logPath\"\n              id=\"logPath\"\n              placeholder=\"Log path\"\n              value={this.state.logPath}\n              onChange={e => this.handleInputChange(e)}\n            />\n          </FormGroup>\n          <FormGroup>{this.renderHeadersInput(true)}</FormGroup>\n          <FormGroup>\n            <Label>Additional request fields</Label>\n            <div>{this.renderFields(true)}</div>\n          </FormGroup>\n          <FormGroup>{this.renderHeadersInput(false)}</FormGroup>\n          <FormGroup>\n            <Label>Additional response fields</Label>\n            <div>{this.renderFields(false)}</div>\n          </FormGroup>\n          <Button onClick={() => this.onSubmit()}>Submit</Button>\n        </Form>\n      </div>\n    );\n  }\n}\n\nConfigEditor.defaultProps = {};\n\nConfigEditor.propTypes = {};\n\nexport default ConfigEditor;\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport ConfigEditor from './components/ConfigEditor.js';\nimport { Container, Row, Col } from 'reactstrap';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div className=\"top\">\n        <Container>\n          <h3>Proxy configuration</h3>\n        </Container>\n      </div>\n      <Container>\n        <ConfigEditor />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}